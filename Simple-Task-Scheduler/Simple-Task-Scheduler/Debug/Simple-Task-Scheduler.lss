
Simple-Task-Scheduler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000062e  000006c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000062e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800106  00800106  000006c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f75  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c2d  00000000  00000000  00001765  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000692  00000000  00000000  00002392  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a4  00000000  00000000  00002a24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000683  00000000  00000000  00002bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000044e  00000000  00000000  0000324b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00003699  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__ctors_end>
   4:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
   8:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
   c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  10:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  14:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  18:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  1c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  20:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  24:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  28:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  2c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  30:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  34:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__vector_13>
  38:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  3c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  40:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  44:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  48:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  4c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  50:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  54:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  58:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  5c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  60:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  64:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  68:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  6c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  70:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  74:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  78:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  7c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  80:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  84:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  88:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  8c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  90:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  94:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  98:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  9c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  a0:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  a4:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  a8:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  ac:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  b0:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  b4:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  b8:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  bc:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  c0:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  c4:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  c8:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  cc:	6d 01       	movw	r12, r26
  ce:	74 01       	movw	r14, r8
  d0:	7b 01       	movw	r14, r22
  d2:	82 01       	movw	r16, r4
  d4:	89 01       	movw	r16, r18
  d6:	90 01       	movw	r18, r0
  d8:	97 01       	movw	r18, r14
  da:	9e 01       	movw	r18, r28
  dc:	a5 01       	movw	r20, r10
  de:	ac 01       	movw	r20, r24

000000e0 <__ctors_end>:
  e0:	11 24       	eor	r1, r1
  e2:	1f be       	out	0x3f, r1	; 63
  e4:	cf ef       	ldi	r28, 0xFF	; 255
  e6:	d8 e0       	ldi	r29, 0x08	; 8
  e8:	de bf       	out	0x3e, r29	; 62
  ea:	cd bf       	out	0x3d, r28	; 61

000000ec <__do_clear_bss>:
  ec:	21 e0       	ldi	r18, 0x01	; 1
  ee:	a6 e0       	ldi	r26, 0x06	; 6
  f0:	b1 e0       	ldi	r27, 0x01	; 1
  f2:	01 c0       	rjmp	.+2      	; 0xf6 <.do_clear_bss_start>

000000f4 <.do_clear_bss_loop>:
  f4:	1d 92       	st	X+, r1

000000f6 <.do_clear_bss_start>:
  f6:	a0 31       	cpi	r26, 0x10	; 16
  f8:	b2 07       	cpc	r27, r18
  fa:	e1 f7       	brne	.-8      	; 0xf4 <.do_clear_bss_loop>

000000fc <__do_copy_data>:
  fc:	11 e0       	ldi	r17, 0x01	; 1
  fe:	a0 e0       	ldi	r26, 0x00	; 0
 100:	b1 e0       	ldi	r27, 0x01	; 1
 102:	ee e2       	ldi	r30, 0x2E	; 46
 104:	f6 e0       	ldi	r31, 0x06	; 6
 106:	02 c0       	rjmp	.+4      	; 0x10c <__do_copy_data+0x10>
 108:	05 90       	lpm	r0, Z+
 10a:	0d 92       	st	X+, r0
 10c:	a6 30       	cpi	r26, 0x06	; 6
 10e:	b1 07       	cpc	r27, r17
 110:	d9 f7       	brne	.-10     	; 0x108 <__do_copy_data+0xc>
 112:	0e 94 99 00 	call	0x132	; 0x132 <main>
 116:	0c 94 15 03 	jmp	0x62a	; 0x62a <_exit>

0000011a <__bad_interrupt>:
 11a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011e <task1_callback>:
    }
}

void task1_callback()
{
	TOGGLE_LED1;
 11e:	9e b1       	in	r25, 0x0e	; 14
 120:	80 e1       	ldi	r24, 0x10	; 16
 122:	89 27       	eor	r24, r25
 124:	8e b9       	out	0x0e, r24	; 14
 126:	08 95       	ret

00000128 <task2_callback>:
}

void task2_callback()
{
	TOGGLE_LED2;
 128:	95 b1       	in	r25, 0x05	; 5
 12a:	80 e2       	ldi	r24, 0x20	; 32
 12c:	89 27       	eor	r24, r25
 12e:	85 b9       	out	0x05, r24	; 5
 130:	08 95       	ret

00000132 <main>:
void task2_callback();

int main(void)
{
	
	_Task_setTickPeriod(1); // set the scheduler period to 1ms
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	0e 94 d5 00 	call	0x1aa	; 0x1aa <_Task_setTickPeriod>
	
	_Task_newTask(TASK1_ID, TASK1_PERIOD, TASK1_PRIORITY, &task1_callback); 
 138:	2f e8       	ldi	r18, 0x8F	; 143
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	40 e0       	ldi	r20, 0x00	; 0
 13e:	50 e0       	ldi	r21, 0x00	; 0
 140:	64 e6       	ldi	r22, 0x64	; 100
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 08 01 	call	0x210	; 0x210 <_Task_newTask>
	_Task_newTask(TASK2_ID, TASK2_PERIOD, TASK2_PRIORITY, &task2_callback); 
 14a:	24 e9       	ldi	r18, 0x94	; 148
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	40 e0       	ldi	r20, 0x00	; 0
 150:	50 e0       	ldi	r21, 0x00	; 0
 152:	68 ec       	ldi	r22, 0xC8	; 200
 154:	82 e0       	ldi	r24, 0x02	; 2
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 08 01 	call	0x210	; 0x210 <_Task_newTask>
	
	_Task_releaseTasks();
 15c:	0e 94 de 00 	call	0x1bc	; 0x1bc <_Task_releaseTasks>
	
    /* Replace with your application code */
    while (1) 
    {
		_Task_scheduleTask();
 160:	0e 94 2d 01 	call	0x25a	; 0x25a <_Task_scheduleTask>
 164:	fd cf       	rjmp	.-6      	; 0x160 <main+0x2e>

00000166 <_Task_updateState>:
 * _Task_stopTasks:														  *
 *						   		        				                  *
 **************************************************************************/
void _Task_stopTasks()
{
	_Timer_stop(); // disable TMR interrupt
 166:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <__data_end>
 16a:	9f 5f       	subi	r25, 0xFF	; 255
 16c:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <__data_end>
 170:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <_Task_headList>
 174:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <_Task_headList+0x1>
 178:	30 97       	sbiw	r30, 0x00	; 0
 17a:	b1 f0       	breq	.+44     	; 0x1a8 <_Task_updateState+0x42>
 17c:	83 81       	ldd	r24, Z+3	; 0x03
 17e:	98 13       	cpse	r25, r24
 180:	0e c0       	rjmp	.+28     	; 0x19e <_Task_updateState+0x38>
 182:	81 85       	ldd	r24, Z+9	; 0x09
 184:	82 30       	cpi	r24, 0x02	; 2
 186:	38 f4       	brcc	.+14     	; 0x196 <_Task_updateState+0x30>
 188:	25 81       	ldd	r18, Z+5	; 0x05
 18a:	36 81       	ldd	r19, Z+6	; 0x06
 18c:	2f 5f       	subi	r18, 0xFF	; 255
 18e:	3f 4f       	sbci	r19, 0xFF	; 255
 190:	36 83       	std	Z+6, r19	; 0x06
 192:	25 83       	std	Z+5, r18	; 0x05
 194:	04 c0       	rjmp	.+8      	; 0x19e <_Task_updateState+0x38>
 196:	82 81       	ldd	r24, Z+2	; 0x02
 198:	89 0f       	add	r24, r25
 19a:	83 83       	std	Z+3, r24	; 0x03
 19c:	11 86       	std	Z+9, r1	; 0x09
 19e:	02 84       	ldd	r0, Z+10	; 0x0a
 1a0:	f3 85       	ldd	r31, Z+11	; 0x0b
 1a2:	e0 2d       	mov	r30, r0
 1a4:	30 97       	sbiw	r30, 0x00	; 0
 1a6:	51 f7       	brne	.-44     	; 0x17c <_Task_updateState+0x16>
 1a8:	08 95       	ret

000001aa <_Task_setTickPeriod>:
 1aa:	23 eb       	ldi	r18, 0xB3	; 179
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	30 93 0b 01 	sts	0x010B, r19	; 0x80010b <_Timer_funPtr+0x1>
 1b2:	20 93 0a 01 	sts	0x010A, r18	; 0x80010a <_Timer_funPtr>
 1b6:	0e 94 4b 01 	call	0x296	; 0x296 <_Timer_setPeriodISR>
 1ba:	08 95       	ret

000001bc <_Task_releaseTasks>:
 1bc:	0e 94 c1 01 	call	0x382	; 0x382 <_Timer_start>
 1c0:	08 95       	ret

000001c2 <_Task_orderTask>:
 *					- IF two tasks have the same priority, the oldest task has		*
 *					  higher priority (newest task is inserted after the older		*
 *					  one.	   		        										*
 ************************************************************************************/
void _Task_orderTask(struct Task * newTask)
{
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	ec 01       	movw	r28, r24
	struct Task * prev;
	
	struct Task * cur;
	
	for (cur = _Task_headList, 
 1c8:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <_Task_headList>
 1cc:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <_Task_headList+0x1>
		 prev = NULL; newTask->priority > cur->priority || cur != NULL; 
 1d0:	2c 81       	ldd	r18, Y+4	; 0x04
{
	struct Task * prev;
	
	struct Task * cur;
	
	for (cur = _Task_headList, 
 1d2:	fa 01       	movw	r30, r20
		 prev = NULL; newTask->priority > cur->priority || cur != NULL; 
 1d4:	a0 e0       	ldi	r26, 0x00	; 0
 1d6:	b0 e0       	ldi	r27, 0x00	; 0
{
	struct Task * prev;
	
	struct Task * cur;
	
	for (cur = _Task_headList, 
 1d8:	04 c0       	rjmp	.+8      	; 0x1e2 <_Task_orderTask+0x20>
		 prev = NULL; newTask->priority > cur->priority || cur != NULL; 
		 prev = cur, cur = cur->next); // go through the list until we find a lowest     \
 1da:	df 01       	movw	r26, r30
 1dc:	02 84       	ldd	r0, Z+10	; 0x0a
 1de:	f3 85       	ldd	r31, Z+11	; 0x0b
 1e0:	e0 2d       	mov	r30, r0
{
	struct Task * prev;
	
	struct Task * cur;
	
	for (cur = _Task_headList, 
 1e2:	94 81       	ldd	r25, Z+4	; 0x04
 1e4:	92 17       	cp	r25, r18
 1e6:	c8 f3       	brcs	.-14     	; 0x1da <_Task_orderTask+0x18>
		 prev = NULL; newTask->priority > cur->priority || cur != NULL; 
 1e8:	30 97       	sbiw	r30, 0x00	; 0
 1ea:	b9 f7       	brne	.-18     	; 0x1da <_Task_orderTask+0x18>
		 prev = cur, cur = cur->next); // go through the list until we find a lowest     \
									      priority task (list should already be ordered) \
									      or until the end of the list (if the new tasks \
										  priority is the lowest						 \
										  
	if (cur == _Task_headList) // the case where the new task has the highest priority   \
 1ec:	45 2b       	or	r20, r21
 1ee:	39 f4       	brne	.+14     	; 0x1fe <_Task_orderTask+0x3c>
								  (becomes the first task in the list), so the header    \
								  must point to it									     
	{
		newTask->next = _Task_headList;
 1f0:	1b 86       	std	Y+11, r1	; 0x0b
 1f2:	1a 86       	std	Y+10, r1	; 0x0a
		
		_Task_headList = newTask;
 1f4:	d0 93 09 01 	sts	0x0109, r29	; 0x800109 <_Task_headList+0x1>
 1f8:	c0 93 08 01 	sts	0x0108, r28	; 0x800108 <_Task_headList>
 1fc:	06 c0       	rjmp	.+12     	; 0x20a <_Task_orderTask+0x48>
	}
	else // otherwise, insert the task in the list
	{
		prev->next = newTask;
 1fe:	1b 96       	adiw	r26, 0x0b	; 11
 200:	dc 93       	st	X, r29
 202:	ce 93       	st	-X, r28
 204:	1a 97       	sbiw	r26, 0x0a	; 10
		
		newTask->next = cur;
 206:	1b 86       	std	Y+11, r1	; 0x0b
 208:	1a 86       	std	Y+10, r1	; 0x0a
	}
	
}
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	08 95       	ret

00000210 <_Task_newTask>:
/**************************************************************************
 * _Task_newTask:									 					  *
 *						   		        				                  *
 **************************************************************************/
void _Task_newTask(int _ID, uint8_t _period, int _priority, void (*_funptr)())
{
 210:	ef 92       	push	r14
 212:	ff 92       	push	r15
 214:	0f 93       	push	r16
 216:	1f 93       	push	r17
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	7c 01       	movw	r14, r24
 21e:	c6 2f       	mov	r28, r22
 220:	d4 2f       	mov	r29, r20
 222:	89 01       	movw	r16, r18
	struct Task * newTask = malloc(sizeof(*newTask));
 224:	8c e0       	ldi	r24, 0x0C	; 12
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <malloc>
 22c:	fc 01       	movw	r30, r24
	
	newTask->ID = _ID;
 22e:	f0 86       	std	Z+8, r15	; 0x08
 230:	e7 82       	std	Z+7, r14	; 0x07
	newTask->period = _period;
 232:	c2 83       	std	Z+2, r28	; 0x02
	newTask->expire_time = _period;
 234:	c3 83       	std	Z+3, r28	; 0x03
	newTask->priority = _priority;
 236:	d4 83       	std	Z+4, r29	; 0x04
	newTask->state = READY;
 238:	11 86       	std	Z+9, r1	; 0x09
	newTask->funptr = _funptr;
 23a:	11 83       	std	Z+1, r17	; 0x01
 23c:	00 83       	st	Z, r16

	_Task_orderTask(newTask);
 23e:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_Task_orderTask>
	
	task_count++;
 242:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <task_count>
 246:	8f 5f       	subi	r24, 0xFF	; 255
 248:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <task_count>
}
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	1f 91       	pop	r17
 252:	0f 91       	pop	r16
 254:	ff 90       	pop	r15
 256:	ef 90       	pop	r14
 258:	08 95       	ret

0000025a <_Task_scheduleTask>:
/**************************************************************************
 * _Task_scheduleTask: 													  *
 *						   		        				                  *
 **************************************************************************/
void _Task_scheduleTask()
{
 25a:	0f 93       	push	r16
 25c:	1f 93       	push	r17
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
	struct Task * cur;
	
	for (cur = _Task_headList; cur != NULL; cur = cur->next) // go through the list until we find a task that is in the ready state
 262:	c0 91 08 01 	lds	r28, 0x0108	; 0x800108 <_Task_headList>
 266:	d0 91 09 01 	lds	r29, 0x0109	; 0x800109 <_Task_headList+0x1>
 26a:	20 97       	sbiw	r28, 0x00	; 0
 26c:	79 f0       	breq	.+30     	; 0x28c <_Task_scheduleTask+0x32>
	{
		if (cur->state == READY)
		{
			cur->state = EXECUTING; // update state to executing
 26e:	01 e0       	ldi	r16, 0x01	; 1
			cur->funptr(); // call task callback function
			cur->state = BLOCKING; // task is now waiting for the next event
 270:	12 e0       	ldi	r17, 0x02	; 2
{
	struct Task * cur;
	
	for (cur = _Task_headList; cur != NULL; cur = cur->next) // go through the list until we find a task that is in the ready state
	{
		if (cur->state == READY)
 272:	89 85       	ldd	r24, Y+9	; 0x09
 274:	81 11       	cpse	r24, r1
 276:	05 c0       	rjmp	.+10     	; 0x282 <_Task_scheduleTask+0x28>
		{
			cur->state = EXECUTING; // update state to executing
 278:	09 87       	std	Y+9, r16	; 0x09
			cur->funptr(); // call task callback function
 27a:	e8 81       	ld	r30, Y
 27c:	f9 81       	ldd	r31, Y+1	; 0x01
 27e:	09 95       	icall
			cur->state = BLOCKING; // task is now waiting for the next event
 280:	19 87       	std	Y+9, r17	; 0x09
 **************************************************************************/
void _Task_scheduleTask()
{
	struct Task * cur;
	
	for (cur = _Task_headList; cur != NULL; cur = cur->next) // go through the list until we find a task that is in the ready state
 282:	0a 84       	ldd	r0, Y+10	; 0x0a
 284:	db 85       	ldd	r29, Y+11	; 0x0b
 286:	c0 2d       	mov	r28, r0
 288:	20 97       	sbiw	r28, 0x00	; 0
 28a:	99 f7       	brne	.-26     	; 0x272 <_Task_scheduleTask+0x18>
			cur->state = EXECUTING; // update state to executing
			cur->funptr(); // call task callback function
			cur->state = BLOCKING; // task is now waiting for the next event
		}
	}
}
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	1f 91       	pop	r17
 292:	0f 91       	pop	r16
 294:	08 95       	ret

00000296 <_Timer_setPeriodISR>:
 *						   		        				    *
 ************************************************************/
void _Timer_stop()
{
	// INTERRUPT
	TIMSK1 &= ~(1<<OCIE1A); // clear interrupt on OCA compare
 296:	e8 2f       	mov	r30, r24
 298:	a0 e8       	ldi	r26, 0x80	; 128
 29a:	b0 e0       	ldi	r27, 0x00	; 0
 29c:	8c 91       	ld	r24, X
 29e:	80 6c       	ori	r24, 0xC0	; 192
 2a0:	8c 93       	st	X, r24
 2a2:	a1 e8       	ldi	r26, 0x81	; 129
 2a4:	b0 e0       	ldi	r27, 0x00	; 0
 2a6:	8c 91       	ld	r24, X
 2a8:	88 60       	ori	r24, 0x08	; 8
 2aa:	8c 93       	st	X, r24
 2ac:	e5 30       	cpi	r30, 0x05	; 5
 2ae:	20 f4       	brcc	.+8      	; 0x2b8 <_Timer_setPeriodISR+0x22>
 2b0:	8c 91       	ld	r24, X
 2b2:	81 60       	ori	r24, 0x01	; 1
 2b4:	8c 93       	st	X, r24
 2b6:	05 c0       	rjmp	.+10     	; 0x2c2 <_Timer_setPeriodISR+0x2c>
 2b8:	a1 e8       	ldi	r26, 0x81	; 129
 2ba:	b0 e0       	ldi	r27, 0x00	; 0
 2bc:	8c 91       	ld	r24, X
 2be:	82 60       	ori	r24, 0x02	; 2
 2c0:	8c 93       	st	X, r24
 2c2:	8e 2f       	mov	r24, r30
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	fc 01       	movw	r30, r24
 2c8:	31 97       	sbiw	r30, 0x01	; 1
 2ca:	ea 30       	cpi	r30, 0x0A	; 10
 2cc:	f1 05       	cpc	r31, r1
 2ce:	08 f0       	brcs	.+2      	; 0x2d2 <_Timer_setPeriodISR+0x3c>
 2d0:	4a c0       	rjmp	.+148    	; 0x366 <_Timer_setPeriodISR+0xd0>
 2d2:	ea 59       	subi	r30, 0x9A	; 154
 2d4:	ff 4f       	sbci	r31, 0xFF	; 255
 2d6:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__tablejump2__>
 2da:	8f e7       	ldi	r24, 0x7F	; 127
 2dc:	9e e3       	ldi	r25, 0x3E	; 62
 2de:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2e2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 2e6:	08 95       	ret
 2e8:	8f ef       	ldi	r24, 0xFF	; 255
 2ea:	9c e7       	ldi	r25, 0x7C	; 124
 2ec:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2f0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 2f4:	08 95       	ret
 2f6:	8f e7       	ldi	r24, 0x7F	; 127
 2f8:	9b eb       	ldi	r25, 0xBB	; 187
 2fa:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 2fe:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 302:	08 95       	ret
 304:	8f ef       	ldi	r24, 0xFF	; 255
 306:	99 ef       	ldi	r25, 0xF9	; 249
 308:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 30c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 310:	08 95       	ret
 312:	8f e0       	ldi	r24, 0x0F	; 15
 314:	97 e2       	ldi	r25, 0x27	; 39
 316:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 31a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 31e:	08 95       	ret
 320:	8f ed       	ldi	r24, 0xDF	; 223
 322:	9e e2       	ldi	r25, 0x2E	; 46
 324:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 328:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 32c:	08 95       	ret
 32e:	8f ea       	ldi	r24, 0xAF	; 175
 330:	96 e3       	ldi	r25, 0x36	; 54
 332:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 336:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 33a:	08 95       	ret
 33c:	8f e7       	ldi	r24, 0x7F	; 127
 33e:	9e e3       	ldi	r25, 0x3E	; 62
 340:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 344:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 348:	08 95       	ret
 34a:	8f e4       	ldi	r24, 0x4F	; 79
 34c:	96 e4       	ldi	r25, 0x46	; 70
 34e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 352:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 356:	08 95       	ret
 358:	8f e1       	ldi	r24, 0x1F	; 31
 35a:	9e e4       	ldi	r25, 0x4E	; 78
 35c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 360:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 364:	08 95       	ret
 366:	e1 e8       	ldi	r30, 0x81	; 129
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	80 81       	ld	r24, Z
 36c:	81 60       	ori	r24, 0x01	; 1
 36e:	80 83       	st	Z, r24
 370:	e8 e8       	ldi	r30, 0x88	; 136
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	8f e7       	ldi	r24, 0x7F	; 127
 376:	9e e3       	ldi	r25, 0x3E	; 62
 378:	91 83       	std	Z+1, r25	; 0x01
 37a:	80 83       	st	Z, r24
 37c:	91 83       	std	Z+1, r25	; 0x01
 37e:	80 83       	st	Z, r24
 380:	08 95       	ret

00000382 <_Timer_start>:
 382:	ef e6       	ldi	r30, 0x6F	; 111
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	80 81       	ld	r24, Z
 388:	82 60       	ori	r24, 0x02	; 2
 38a:	80 83       	st	Z, r24
 38c:	08 95       	ret

0000038e <__vector_13>:
/*************************************************************
 * TIMER1 ISR: - calls the function pointed by _TMR_funPtr   *
 *										        	         *
 *************************************************************/
ISR(TIMER1_COMPA_vect)
{
 38e:	1f 92       	push	r1
 390:	0f 92       	push	r0
 392:	0f b6       	in	r0, 0x3f	; 63
 394:	0f 92       	push	r0
 396:	11 24       	eor	r1, r1
 398:	2f 93       	push	r18
 39a:	3f 93       	push	r19
 39c:	4f 93       	push	r20
 39e:	5f 93       	push	r21
 3a0:	6f 93       	push	r22
 3a2:	7f 93       	push	r23
 3a4:	8f 93       	push	r24
 3a6:	9f 93       	push	r25
 3a8:	af 93       	push	r26
 3aa:	bf 93       	push	r27
 3ac:	ef 93       	push	r30
 3ae:	ff 93       	push	r31
	(*_Timer_funPtr)(); // call TMR1 function
 3b0:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <_Timer_funPtr>
 3b4:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <_Timer_funPtr+0x1>
 3b8:	09 95       	icall
}
 3ba:	ff 91       	pop	r31
 3bc:	ef 91       	pop	r30
 3be:	bf 91       	pop	r27
 3c0:	af 91       	pop	r26
 3c2:	9f 91       	pop	r25
 3c4:	8f 91       	pop	r24
 3c6:	7f 91       	pop	r23
 3c8:	6f 91       	pop	r22
 3ca:	5f 91       	pop	r21
 3cc:	4f 91       	pop	r20
 3ce:	3f 91       	pop	r19
 3d0:	2f 91       	pop	r18
 3d2:	0f 90       	pop	r0
 3d4:	0f be       	out	0x3f, r0	; 63
 3d6:	0f 90       	pop	r0
 3d8:	1f 90       	pop	r1
 3da:	18 95       	reti

000003dc <__tablejump2__>:
 3dc:	ee 0f       	add	r30, r30
 3de:	ff 1f       	adc	r31, r31
 3e0:	05 90       	lpm	r0, Z+
 3e2:	f4 91       	lpm	r31, Z
 3e4:	e0 2d       	mov	r30, r0
 3e6:	09 94       	ijmp

000003e8 <malloc>:
 3e8:	0f 93       	push	r16
 3ea:	1f 93       	push	r17
 3ec:	cf 93       	push	r28
 3ee:	df 93       	push	r29
 3f0:	82 30       	cpi	r24, 0x02	; 2
 3f2:	91 05       	cpc	r25, r1
 3f4:	10 f4       	brcc	.+4      	; 0x3fa <malloc+0x12>
 3f6:	82 e0       	ldi	r24, 0x02	; 2
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <__flp>
 3fe:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <__flp+0x1>
 402:	20 e0       	ldi	r18, 0x00	; 0
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	a0 e0       	ldi	r26, 0x00	; 0
 408:	b0 e0       	ldi	r27, 0x00	; 0
 40a:	30 97       	sbiw	r30, 0x00	; 0
 40c:	19 f1       	breq	.+70     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 40e:	40 81       	ld	r20, Z
 410:	51 81       	ldd	r21, Z+1	; 0x01
 412:	02 81       	ldd	r16, Z+2	; 0x02
 414:	13 81       	ldd	r17, Z+3	; 0x03
 416:	48 17       	cp	r20, r24
 418:	59 07       	cpc	r21, r25
 41a:	c8 f0       	brcs	.+50     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 41c:	84 17       	cp	r24, r20
 41e:	95 07       	cpc	r25, r21
 420:	69 f4       	brne	.+26     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 422:	10 97       	sbiw	r26, 0x00	; 0
 424:	31 f0       	breq	.+12     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 426:	12 96       	adiw	r26, 0x02	; 2
 428:	0c 93       	st	X, r16
 42a:	12 97       	sbiw	r26, 0x02	; 2
 42c:	13 96       	adiw	r26, 0x03	; 3
 42e:	1c 93       	st	X, r17
 430:	27 c0       	rjmp	.+78     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 432:	00 93 0e 01 	sts	0x010E, r16	; 0x80010e <__flp>
 436:	10 93 0f 01 	sts	0x010F, r17	; 0x80010f <__flp+0x1>
 43a:	22 c0       	rjmp	.+68     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 43c:	21 15       	cp	r18, r1
 43e:	31 05       	cpc	r19, r1
 440:	19 f0       	breq	.+6      	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 442:	42 17       	cp	r20, r18
 444:	53 07       	cpc	r21, r19
 446:	18 f4       	brcc	.+6      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 448:	9a 01       	movw	r18, r20
 44a:	bd 01       	movw	r22, r26
 44c:	ef 01       	movw	r28, r30
 44e:	df 01       	movw	r26, r30
 450:	f8 01       	movw	r30, r16
 452:	db cf       	rjmp	.-74     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 454:	21 15       	cp	r18, r1
 456:	31 05       	cpc	r19, r1
 458:	f9 f0       	breq	.+62     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 45a:	28 1b       	sub	r18, r24
 45c:	39 0b       	sbc	r19, r25
 45e:	24 30       	cpi	r18, 0x04	; 4
 460:	31 05       	cpc	r19, r1
 462:	80 f4       	brcc	.+32     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 464:	8a 81       	ldd	r24, Y+2	; 0x02
 466:	9b 81       	ldd	r25, Y+3	; 0x03
 468:	61 15       	cp	r22, r1
 46a:	71 05       	cpc	r23, r1
 46c:	21 f0       	breq	.+8      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 46e:	fb 01       	movw	r30, r22
 470:	93 83       	std	Z+3, r25	; 0x03
 472:	82 83       	std	Z+2, r24	; 0x02
 474:	04 c0       	rjmp	.+8      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 476:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <__flp+0x1>
 47a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__flp>
 47e:	fe 01       	movw	r30, r28
 480:	32 96       	adiw	r30, 0x02	; 2
 482:	44 c0       	rjmp	.+136    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 484:	fe 01       	movw	r30, r28
 486:	e2 0f       	add	r30, r18
 488:	f3 1f       	adc	r31, r19
 48a:	81 93       	st	Z+, r24
 48c:	91 93       	st	Z+, r25
 48e:	22 50       	subi	r18, 0x02	; 2
 490:	31 09       	sbc	r19, r1
 492:	39 83       	std	Y+1, r19	; 0x01
 494:	28 83       	st	Y, r18
 496:	3a c0       	rjmp	.+116    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 498:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__brkval>
 49c:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__brkval+0x1>
 4a0:	23 2b       	or	r18, r19
 4a2:	41 f4       	brne	.+16     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 4a4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 4a8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 4ac:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <__brkval+0x1>
 4b0:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <__brkval>
 4b4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 4b8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 4bc:	21 15       	cp	r18, r1
 4be:	31 05       	cpc	r19, r1
 4c0:	41 f4       	brne	.+16     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
 4c2:	2d b7       	in	r18, 0x3d	; 61
 4c4:	3e b7       	in	r19, 0x3e	; 62
 4c6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 4ca:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 4ce:	24 1b       	sub	r18, r20
 4d0:	35 0b       	sbc	r19, r21
 4d2:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <__brkval>
 4d6:	f0 91 0d 01 	lds	r31, 0x010D	; 0x80010d <__brkval+0x1>
 4da:	e2 17       	cp	r30, r18
 4dc:	f3 07       	cpc	r31, r19
 4de:	a0 f4       	brcc	.+40     	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 4e0:	2e 1b       	sub	r18, r30
 4e2:	3f 0b       	sbc	r19, r31
 4e4:	28 17       	cp	r18, r24
 4e6:	39 07       	cpc	r19, r25
 4e8:	78 f0       	brcs	.+30     	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 4ea:	ac 01       	movw	r20, r24
 4ec:	4e 5f       	subi	r20, 0xFE	; 254
 4ee:	5f 4f       	sbci	r21, 0xFF	; 255
 4f0:	24 17       	cp	r18, r20
 4f2:	35 07       	cpc	r19, r21
 4f4:	48 f0       	brcs	.+18     	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 4f6:	4e 0f       	add	r20, r30
 4f8:	5f 1f       	adc	r21, r31
 4fa:	50 93 0d 01 	sts	0x010D, r21	; 0x80010d <__brkval+0x1>
 4fe:	40 93 0c 01 	sts	0x010C, r20	; 0x80010c <__brkval>
 502:	81 93       	st	Z+, r24
 504:	91 93       	st	Z+, r25
 506:	02 c0       	rjmp	.+4      	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
 508:	e0 e0       	ldi	r30, 0x00	; 0
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	cf 01       	movw	r24, r30
 50e:	df 91       	pop	r29
 510:	cf 91       	pop	r28
 512:	1f 91       	pop	r17
 514:	0f 91       	pop	r16
 516:	08 95       	ret

00000518 <free>:
 518:	cf 93       	push	r28
 51a:	df 93       	push	r29
 51c:	00 97       	sbiw	r24, 0x00	; 0
 51e:	09 f4       	brne	.+2      	; 0x522 <free+0xa>
 520:	81 c0       	rjmp	.+258    	; 0x624 <free+0x10c>
 522:	fc 01       	movw	r30, r24
 524:	32 97       	sbiw	r30, 0x02	; 2
 526:	13 82       	std	Z+3, r1	; 0x03
 528:	12 82       	std	Z+2, r1	; 0x02
 52a:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <__flp>
 52e:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <__flp+0x1>
 532:	10 97       	sbiw	r26, 0x00	; 0
 534:	81 f4       	brne	.+32     	; 0x556 <free+0x3e>
 536:	20 81       	ld	r18, Z
 538:	31 81       	ldd	r19, Z+1	; 0x01
 53a:	82 0f       	add	r24, r18
 53c:	93 1f       	adc	r25, r19
 53e:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__brkval>
 542:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__brkval+0x1>
 546:	28 17       	cp	r18, r24
 548:	39 07       	cpc	r19, r25
 54a:	51 f5       	brne	.+84     	; 0x5a0 <free+0x88>
 54c:	f0 93 0d 01 	sts	0x010D, r31	; 0x80010d <__brkval+0x1>
 550:	e0 93 0c 01 	sts	0x010C, r30	; 0x80010c <__brkval>
 554:	67 c0       	rjmp	.+206    	; 0x624 <free+0x10c>
 556:	ed 01       	movw	r28, r26
 558:	20 e0       	ldi	r18, 0x00	; 0
 55a:	30 e0       	ldi	r19, 0x00	; 0
 55c:	ce 17       	cp	r28, r30
 55e:	df 07       	cpc	r29, r31
 560:	40 f4       	brcc	.+16     	; 0x572 <free+0x5a>
 562:	4a 81       	ldd	r20, Y+2	; 0x02
 564:	5b 81       	ldd	r21, Y+3	; 0x03
 566:	9e 01       	movw	r18, r28
 568:	41 15       	cp	r20, r1
 56a:	51 05       	cpc	r21, r1
 56c:	f1 f0       	breq	.+60     	; 0x5aa <free+0x92>
 56e:	ea 01       	movw	r28, r20
 570:	f5 cf       	rjmp	.-22     	; 0x55c <free+0x44>
 572:	d3 83       	std	Z+3, r29	; 0x03
 574:	c2 83       	std	Z+2, r28	; 0x02
 576:	40 81       	ld	r20, Z
 578:	51 81       	ldd	r21, Z+1	; 0x01
 57a:	84 0f       	add	r24, r20
 57c:	95 1f       	adc	r25, r21
 57e:	c8 17       	cp	r28, r24
 580:	d9 07       	cpc	r29, r25
 582:	59 f4       	brne	.+22     	; 0x59a <free+0x82>
 584:	88 81       	ld	r24, Y
 586:	99 81       	ldd	r25, Y+1	; 0x01
 588:	84 0f       	add	r24, r20
 58a:	95 1f       	adc	r25, r21
 58c:	02 96       	adiw	r24, 0x02	; 2
 58e:	91 83       	std	Z+1, r25	; 0x01
 590:	80 83       	st	Z, r24
 592:	8a 81       	ldd	r24, Y+2	; 0x02
 594:	9b 81       	ldd	r25, Y+3	; 0x03
 596:	93 83       	std	Z+3, r25	; 0x03
 598:	82 83       	std	Z+2, r24	; 0x02
 59a:	21 15       	cp	r18, r1
 59c:	31 05       	cpc	r19, r1
 59e:	29 f4       	brne	.+10     	; 0x5aa <free+0x92>
 5a0:	f0 93 0f 01 	sts	0x010F, r31	; 0x80010f <__flp+0x1>
 5a4:	e0 93 0e 01 	sts	0x010E, r30	; 0x80010e <__flp>
 5a8:	3d c0       	rjmp	.+122    	; 0x624 <free+0x10c>
 5aa:	e9 01       	movw	r28, r18
 5ac:	fb 83       	std	Y+3, r31	; 0x03
 5ae:	ea 83       	std	Y+2, r30	; 0x02
 5b0:	49 91       	ld	r20, Y+
 5b2:	59 91       	ld	r21, Y+
 5b4:	c4 0f       	add	r28, r20
 5b6:	d5 1f       	adc	r29, r21
 5b8:	ec 17       	cp	r30, r28
 5ba:	fd 07       	cpc	r31, r29
 5bc:	61 f4       	brne	.+24     	; 0x5d6 <free+0xbe>
 5be:	80 81       	ld	r24, Z
 5c0:	91 81       	ldd	r25, Z+1	; 0x01
 5c2:	84 0f       	add	r24, r20
 5c4:	95 1f       	adc	r25, r21
 5c6:	02 96       	adiw	r24, 0x02	; 2
 5c8:	e9 01       	movw	r28, r18
 5ca:	99 83       	std	Y+1, r25	; 0x01
 5cc:	88 83       	st	Y, r24
 5ce:	82 81       	ldd	r24, Z+2	; 0x02
 5d0:	93 81       	ldd	r25, Z+3	; 0x03
 5d2:	9b 83       	std	Y+3, r25	; 0x03
 5d4:	8a 83       	std	Y+2, r24	; 0x02
 5d6:	e0 e0       	ldi	r30, 0x00	; 0
 5d8:	f0 e0       	ldi	r31, 0x00	; 0
 5da:	12 96       	adiw	r26, 0x02	; 2
 5dc:	8d 91       	ld	r24, X+
 5de:	9c 91       	ld	r25, X
 5e0:	13 97       	sbiw	r26, 0x03	; 3
 5e2:	00 97       	sbiw	r24, 0x00	; 0
 5e4:	19 f0       	breq	.+6      	; 0x5ec <free+0xd4>
 5e6:	fd 01       	movw	r30, r26
 5e8:	dc 01       	movw	r26, r24
 5ea:	f7 cf       	rjmp	.-18     	; 0x5da <free+0xc2>
 5ec:	8d 91       	ld	r24, X+
 5ee:	9c 91       	ld	r25, X
 5f0:	11 97       	sbiw	r26, 0x01	; 1
 5f2:	9d 01       	movw	r18, r26
 5f4:	2e 5f       	subi	r18, 0xFE	; 254
 5f6:	3f 4f       	sbci	r19, 0xFF	; 255
 5f8:	82 0f       	add	r24, r18
 5fa:	93 1f       	adc	r25, r19
 5fc:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__brkval>
 600:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__brkval+0x1>
 604:	28 17       	cp	r18, r24
 606:	39 07       	cpc	r19, r25
 608:	69 f4       	brne	.+26     	; 0x624 <free+0x10c>
 60a:	30 97       	sbiw	r30, 0x00	; 0
 60c:	29 f4       	brne	.+10     	; 0x618 <free+0x100>
 60e:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <__flp+0x1>
 612:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__flp>
 616:	02 c0       	rjmp	.+4      	; 0x61c <free+0x104>
 618:	13 82       	std	Z+3, r1	; 0x03
 61a:	12 82       	std	Z+2, r1	; 0x02
 61c:	b0 93 0d 01 	sts	0x010D, r27	; 0x80010d <__brkval+0x1>
 620:	a0 93 0c 01 	sts	0x010C, r26	; 0x80010c <__brkval>
 624:	df 91       	pop	r29
 626:	cf 91       	pop	r28
 628:	08 95       	ret

0000062a <_exit>:
 62a:	f8 94       	cli

0000062c <__stop_program>:
 62c:	ff cf       	rjmp	.-2      	; 0x62c <__stop_program>
